{"ast":null,"code":"// Created by: Tyler Te\nvar clientId='5a9bc2fe84e049f8b6a6b5b2f5f4f670';var redirectUri='http://localhost:3000/';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}// Check for access token match in URL\nvar tokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(tokenMatch&&expiresInMatch){accessToken=tokenMatch[1];var expiresIn=Number(expiresInMatch[1]);// Clear the parameters from the URL, so the token doesn't get grabbed after it has expired\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=this.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},getUserId:function getUserId(){var accessToken=this.getAccessToken();return fetch('https://api.spotify.com/v1/me',{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){return jsonResponse.id;});},createPlaylist:function createPlaylist(userId,playlistName){var accessToken=this.getAccessToken();return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{method:'POST',headers:{Authorization:\"Bearer \".concat(accessToken),'Content-Type':'application/json'},body:JSON.stringify({name:playlistName})}).then(function(response){return response.json();}).then(function(jsonResponse){return jsonResponse.id;});},addTracksToPlaylist:function addTracksToPlaylist(playlistId,trackUris){var accessToken=this.getAccessToken();return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistId,\"/tracks\"),{method:'POST',headers:{Authorization:\"Bearer \".concat(accessToken),'Content-Type':'application/json'},body:JSON.stringify({uris:trackUris})});}};export default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","tokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","getUserId","createPlaylist","userId","playlistName","method","body","JSON","stringify","addTracksToPlaylist","playlistId","trackUris","uris"],"sources":["/Volumes/Tyler HDD/Projects/Jamming/jamming-app/src/components/Spotify.js"],"sourcesContent":["// Created by: Tyler Te\n\n\nconst clientId = '5a9bc2fe84e049f8b6a6b5b2f5f4f670';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n          return accessToken;\n        }\n    \n        // Check for access token match in URL\n        const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    \n        if (tokenMatch && expiresInMatch) {\n          accessToken = tokenMatch[1];\n          const expiresIn = Number(expiresInMatch[1]);\n    \n          // Clear the parameters from the URL, so the token doesn't get grabbed after it has expired\n          window.setTimeout(() => accessToken = '', expiresIn * 1000);\n          window.history.pushState('Access Token', null, '/');\n          return accessToken;\n        } else {\n          const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n          window.location = accessUrl;\n        }\n      },\n    \n      search(term) {\n        const accessToken = this.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => response.json())\n        .then(jsonResponse => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        });\n      },\n      getUserId() {\n        const accessToken = this.getAccessToken();\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n        .then(response => response.json())\n        .then(jsonResponse => jsonResponse.id);\n    },\n\n    createPlaylist(userId, playlistName) {\n        const accessToken = this.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: playlistName\n            })\n        })\n        .then(response => response.json())\n        .then(jsonResponse => jsonResponse.id);\n    },\n\n    addTracksToPlaylist(playlistId, trackUris) {\n        const accessToken = this.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                uris: trackUris\n            })\n        });\n    }       \n\n};\n\nexport default Spotify;"],"mappings":"AAAA;AAGA,GAAM,CAAAA,QAAQ,CAAG,kCAAkC,CACnD,GAAM,CAAAC,WAAW,CAAG,wBAAwB,CAC5C,GAAI,CAAAC,WAAW,CAEf,GAAM,CAAAC,OAAO,CAAG,CACZC,cAAc,UAAAA,eAAA,CAAG,CACb,GAAIF,WAAW,CAAE,CACf,MAAO,CAAAA,WAAW,CACpB,CAEA;AACA,GAAM,CAAAG,UAAU,CAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC,CACrE,GAAM,CAAAC,cAAc,CAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,CAEvE,GAAIJ,UAAU,EAAIK,cAAc,CAAE,CAChCR,WAAW,CAAGG,UAAU,CAAC,CAAC,CAAC,CAC3B,GAAM,CAAAM,SAAS,CAAGC,MAAM,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC,CAE3C;AACAJ,MAAM,CAACO,UAAU,CAAC,iBAAM,CAAAX,WAAW,CAAG,EAAE,GAAES,SAAS,CAAG,IAAI,CAAC,CAC3DL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,CAAE,IAAI,CAAE,GAAG,CAAC,CACnD,MAAO,CAAAb,WAAW,CACpB,CAAC,IAAM,CACL,GAAM,CAAAc,SAAS,qDAAAC,MAAA,CAAuDjB,QAAQ,oEAAAiB,MAAA,CAAkEhB,WAAW,CAAE,CAC7JK,MAAM,CAACC,QAAQ,CAAGS,SAAS,CAC7B,CACF,CAAC,CAEDE,MAAM,UAAAA,OAACC,IAAI,CAAE,CACX,GAAM,CAAAjB,WAAW,CAAG,IAAI,CAACE,cAAc,CAAC,CAAC,CACzC,MAAO,CAAAgB,KAAK,mDAAAH,MAAA,CAAmDE,IAAI,EAAI,CACrEE,OAAO,CAAE,CACPC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CACtC,CACF,CAAC,CAAC,CAACqB,IAAI,CAAC,SAAAC,QAAQ,QAAI,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,GAAC,CACnCF,IAAI,CAAC,SAAAG,YAAY,CAAI,CACpB,GAAI,CAACA,YAAY,CAACC,MAAM,CAAE,CACxB,MAAO,EAAE,CACX,CACA,MAAO,CAAAD,YAAY,CAACC,MAAM,CAACC,KAAK,CAACC,GAAG,CAAC,SAAAC,KAAK,QAAK,CAC7CC,EAAE,CAAED,KAAK,CAACC,EAAE,CACZC,IAAI,CAAEF,KAAK,CAACE,IAAI,CAChBC,MAAM,CAAEH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAC7BG,KAAK,CAAEL,KAAK,CAACK,KAAK,CAACH,IAAI,CACvBI,GAAG,CAAEN,KAAK,CAACM,GACb,CAAC,EAAC,CAAC,CACL,CAAC,CAAC,CACJ,CAAC,CACDC,SAAS,UAAAA,UAAA,CAAG,CACV,GAAM,CAAAnC,WAAW,CAAG,IAAI,CAACE,cAAc,CAAC,CAAC,CACzC,MAAO,CAAAgB,KAAK,CAAC,+BAA+B,CAAE,CAC1CC,OAAO,CAAE,CACLC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CACxC,CACJ,CAAC,CAAC,CACDqB,IAAI,CAAC,SAAAC,QAAQ,QAAI,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,GAAC,CACjCF,IAAI,CAAC,SAAAG,YAAY,QAAI,CAAAA,YAAY,CAACK,EAAE,GAAC,CAC1C,CAAC,CAEDO,cAAc,UAAAA,eAACC,MAAM,CAAEC,YAAY,CAAE,CACjC,GAAM,CAAAtC,WAAW,CAAG,IAAI,CAACE,cAAc,CAAC,CAAC,CACzC,MAAO,CAAAgB,KAAK,qCAAAH,MAAA,CAAqCsB,MAAM,eAAc,CACjEE,MAAM,CAAE,MAAM,CACdpB,OAAO,CAAE,CACLC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CAAE,CACtC,cAAc,CAAE,kBACpB,CAAC,CACDwC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBZ,IAAI,CAAEQ,YACV,CAAC,CACL,CAAC,CAAC,CACDjB,IAAI,CAAC,SAAAC,QAAQ,QAAI,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,GAAC,CACjCF,IAAI,CAAC,SAAAG,YAAY,QAAI,CAAAA,YAAY,CAACK,EAAE,GAAC,CAC1C,CAAC,CAEDc,mBAAmB,UAAAA,oBAACC,UAAU,CAAEC,SAAS,CAAE,CACvC,GAAM,CAAA7C,WAAW,CAAG,IAAI,CAACE,cAAc,CAAC,CAAC,CACzC,MAAO,CAAAgB,KAAK,yCAAAH,MAAA,CAAyC6B,UAAU,YAAW,CACtEL,MAAM,CAAE,MAAM,CACdpB,OAAO,CAAE,CACLC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CAAE,CACtC,cAAc,CAAE,kBACpB,CAAC,CACDwC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBI,IAAI,CAAED,SACV,CAAC,CACL,CAAC,CAAC,CACN,CAEJ,CAAC,CAED,cAAe,CAAA5C,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}